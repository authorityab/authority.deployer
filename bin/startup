#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('SoftResource.Deployer:server');
var http = require('http');
var com = require('../lib/communication');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create and set controllers
 */

 var indexController = require('../controllers/index');
 var apiController = require('../controllers/api')(com);

 app.use('/api', apiController);
 app.use('/', indexController);


 /**
  * Setup error handlers.
  */

 // catch 404 and forward to error handler
 app.use(function(req, res, next) {
   var err = new Error('Not Found');
   err.status = 404;
   next(err);
 });

 // development
 // will print stacktrace
 if (app.get('env') === 'development') {
   app.use(function(err, req, res, next) {
     res.status(err.status || 500);
     res.render('error', {
       message: err.message,
       error: err
     });
     console.log(err);
   });
 }

 // production
 if (app.get('env') === 'production') {
   app.use(function(err, req, res, next) {
     res.status(err.status || 500);
     res.render('error', {
       message: err.message,
       error: {}
     });
     console.log(err);
   });
 }


/**
  * Create HTTP server.
  */

var server = http.createServer(app);

server.listen(port, function() {
  console.log('listening on *:' + port + ' in ' + app.get('env') + ' mode');
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Create communication service.
 */

com.init(server);

/**
 * Initialize IO modules.
 */

if (app.get('env') === 'production') {
  var inputs = new (require('../lib/inputs'));
  var outputs = new (require('../lib/outputs'));

  inputs.init(com);
  outputs.init();

  com.attachOutputs(outputs);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
